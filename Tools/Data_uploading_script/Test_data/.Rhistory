# Start of processing for numeric data
# set working df to empty
melted_data <- data.frame()
selected_columns <- list()
# Loop through columns of df
for (j in 1:ncol(df_being_checked)) {
# Check condition for selecting the column
# The first test requires a variance > 0 which indicate all values in the column differ.
# The second test checks that the variance is not NA, which would mean all values are NA.
if (var(df_being_checked[, j], na.rm = TRUE) > 0
&& !is.na(var(df_being_checked[, j], na.rm = TRUE))) {
# Store the selected column along with its name
selected_columns[[colnames(df_being_checked)[j]]] <- df_being_checked[, j]
}
}
# Convert the list to a dataframe
numeric_columns <- as.data.frame(selected_columns)
# Convert values of -99 to NA
numeric_columns <- replace_neg99_with_na(numeric_columns)
# Create boxplot for all sheets that have sufficient numeric data (nrow > 5).
# Test for no numeric data and skip boxplot
if (
(length(names(numeric_columns))) > 0
&& (nrow(numeric_columns) > 5)
) {
# Print summary of numeric data
print(summary(numeric_columns))
# Create a horizontal box plot with individual numerical axes
# Melt the dataframe to long format using reshape2 package
melted_data <- reshape2::melt(numeric_columns)
# Loop through unique variables and create boxplots
for(m in unique(melted_data$variable)){
# Subset data for the current variable
subset_data <- melted_data[melted_data$variable == m, ]
# Create boxplot for the subsetted data
boxplot <- ggplot(subset_data, aes(x = variable, y = value)) +
ggplot2::geom_boxplot() +
stat_summary(fun.y=mean, geom="point", shape=20, size=6, color="red", fill="red") +
ggplot2::ggtitle(paste0("Boxplot for ", name_of_df)) +
xlab(m)+
ggplot2::coord_flip() +
theme(plot.title = element_text(size = 9), axis.title.y = element_text(size = 7)) + # Adjust the size as needed
ggplot2::theme(axis.title.x = ggplot2::element_blank()) + # Suppress x-axis text
ggplot2::theme(axis.text.y = ggplot2::element_blank())  # Suppress y-axis text
print(boxplot)
cat("\n")
}
cat("\n")
}
cat(paste0("End of processing for ", name_of_df, "\n"))
cat("*            ===================================================            *\n")
cat("\n")
}
#' Create cropping calendar for the dataset.
#' Assemble dates in different dataframes
#' E5. Planting
#' E6. Irrigation
#' E7. Fertilizer
#' E8. Organic Amendments
#' E9. Tillage
#' E11. Harvest
#' To facilitate processing, we extract the date and assign an event code.
#' Because some sheets have no data (nrows = 0), we have to consider two cases.
E5Planting <- E5..Planting[,c(1:3,5)]
E5Planting$Event <- "P"   # Coded for planting
colnames(E5Planting) <- c("Experiment ID", "Site", "Year", "Date", "Event")
E6Irrigation <- E6..Irrigation[,c(1:3,5)]
if(nrow(E6Irrigation) > 0){E6Irrigation$Event <- "I"   # Coded for irrigation
} else {E6Irrigation$Event <- character(0)}
colnames(E6Irrigation) <- c("Experiment ID", "Site", "Year", "Date", "Event")
E7Fertilizer <- E7..Fertilizer[,c(1:3,5)]
if(nrow(E7Fertilizer) > 0){E7Fertilizer$Event <- "F"   # Coded for fertilizer
} else {E7Fertilizer$Event <- character(0)}
colnames(E7Fertilizer) <- c("Experiment ID", "Site", "Year", "Date", "Event")
E8OrganicAmend <- E8..Organic.Amendments[,c(1:3,5)]
if(nrow(E8OrganicAmend) > 0){E8OrganicAmend$Event <- "O"   # Coded for Organic amendments
} else {E8OrganicAmend$Event <- character(0)}
colnames(E8OrganicAmend) <- c("Experiment ID", "Site", "Year", "Date", "Event")
E9Tillage <- E9..Tillage[,c(1:3,5)]
if(nrow(E9Tillage) > 0){E9Tillage$Event <- "T"   # Coded for Tillage
} else {E9Tillage$Event <- character(0)}
colnames(E9Tillage) <- c("Experiment ID", "Site", "Year", "Date", "Event")
E11Harvest <- E11..Harvest[,c(1:3,5)]
if(nrow(E11Harvest) > 0){E11Harvest$Event <- "H"   # Coded for Harvest
} else {E11Harvest$Event <- character(0)}
colnames(E11Harvest) <- c("Experiment ID", "Site", "Year", "Date", "Event")
#' With the six temporary dataframes in hand, we merge them to create the
#' dataframe df_dates, removing any dataframe that lacks date information.
#'  List of data frames
df_list <- list(E5Planting, E6Irrigation, E7Fertilizer, E8OrganicAmend,
E9Tillage, E11Harvest)
# Remove empty data frames from the list
df_list <- df_list[sapply(df_list, function(x) nrow(x) > 0)]
# Concatenate data frames
if (length(df_list) > 0) {
df_dates <- do.call(rbind, df_list)
} else {
df_dates <- data.frame()  # Return an empty data frame if all are empty
}
#' The list of merged dates can be displayed.
df_dates <- unique(df_dates)
#' Often data from replicates or treatments will identical values, so we use unique()
#' to simplify the dataset.
#print(df_dates) # To check outputs
planting_dates <- aggregate(Date ~ `Experiment ID` + Site + Year, data = subset(df_dates, Event == "P"), FUN = min)
# Calculate DAP relative to Planting event
# Merge planting_dates with df_dates
df_dates <- merge(df_dates, planting_dates,
by = c("Experiment ID", "Site", "Year"), suffixes = c("", ".Planting"))
# Calculate DAP relative to Planting event
df_dates$DAP <- with(df_dates, Date - Date.Planting)
#print(df_dates) # To check outputs
# Create a separate data frame for geom_text
df_dates$DAP <- as.numeric(df_dates$DAP)
# Define custom point shapes and colors
point_shapes <- c(T = 16, P = 19, F = 17, I = 1, C = 12, H = 15, O = 13)
point_names <- c(T = "Tillage", P = "Planting", F = "Fertilizer", I = "Irrigation", H = "Harvest", C= "Agrochemicals", O= "Manure")
point_colors <- c(T = "brown", P = "dark green", F = "dark gray", I = "blue", H = "#CC9933", C= "red", O= "dark orange")
label_y_position <- c(T = -.5, P = -1.0, F = 1.5, I = 2.0, C = 1.0, H = 1.5, O = 1.3)
# Reorder the levels of the y-axis factor in reverse order
df_dates$"Experiment ID" <- factor(df_dates$"Experiment ID", levels = rev(levels(as.factor(df_dates$"Experiment ID"))))
# Plot parallel timelines with labels above or below events and without legend
ggplot(df_dates, aes(x = DAP, y = paste(`Experiment ID`, Site, Year),
shape = Event, color = Event, label = Event)) +
geom_point(size = 2) +
geom_text(aes(y = ifelse(Event %in% c("P", "F", "I", "C", "T", "H", "O"), paste(`Experiment ID`, Site, Year), NA)),
position = position_dodge(width = 0.2), size = 3,
vjust = label_y_position[subset(df_dates, Event %in% c("P", "F", "I", "C", "T", "H", "O"))$Event],
show.legend = FALSE) +
scale_x_continuous(expand = c(.2, 0), name = "Days after planting") +
theme_linedraw() +
theme(legend.position = "plot") +
scale_shape_manual(values = point_shapes) +
scale_color_manual(values = point_colors, labels = point_names) +
theme(panel.grid.major.y = element_line(color = "brown", linewidth = 0.3),  # Change color and width of horizontal grid lines
panel.grid.major.x = element_blank(),  # Suppress vertical grid lines
panel.grid.minor.x = element_blank(),  # Suppress vertical grid lines
panel.grid.minor.y = element_blank(),
plot.caption = element_text(hjust = 0)) + # Left-align the caption
labs(title = "Timelines for Experiments, Sites and Years", y = NULL,
caption = "Replicates or treatments having identical event dates are shown as a single line.")
# Get the map data for Florida
florida_map <- map_data("state", region = "florida")
M2Sites <- M2..Sites
M2Sites$Source <- "M2. Sites"
M2Sites <- M2Sites[, c(8, 1, 6, 7)]
colnames(M2Sites) <- c("Source", "Location", "Lat", "Long")
E2Fields <- E2..Fields
E2Fields$Source <- "E2. Fields"
E2Fields <- E2Fields[, c(20, 3:5)]
colnames(E2Fields) <- c("Source", "Location", "Lat", "Long")
S1Soils <- S1..Soil.Metadata
S1Soils$Source <- "S1. Soil Meta"
S1Soils <- S1Soils[, c(12, 1, 6, 7)]
colnames(S1Soils) <- c("Source", "Location", "Lat", "Long")
W1Weather <- W1..Weather.Station.Metadata
W1Weather$Source <- "W1. Weather"
W1Weather <- W1Weather[, c(9, 1, 3, 4)]
colnames(W1Weather) <- c("Source", "Location", "Lat", "Long")
#' With the four temporary data frames in hand, we merge them to create the
#' data frame df_geo_data, removing any data frame that lacks geocoordinates.
#' List of data frames
df_list <- list(M2Sites, E2Fields, S1Soils, W1Weather)
# Remove empty data frames from the list
df_list <- df_list[sapply(df_list, function(x) nrow(x) > 0)]
# Concatenate data frames
if (length(df_list) > 0) {
df_geo_data <- do.call(rbind, df_list)
} else {
df_geo_data <- data.frame()  # Return an empty data frame if all are empty
}
#' The list of merged geocoordinates is displayed.
df_geo_data_map <- df_geo_data
df_geo_data$Source <- format(df_geo_data$Source, justify = "left")
df_geo_data$Location <- format(df_geo_data$Location, justify = "left")
df_geo_data2 <- left_align_column_names(df_geo_data)
print(df_geo_data2, row.names = FALSE)
#' Using ggplot(), a base map of Florida is created, then overlain with the
#' locations as points using different colors depending on the variable Source.
ggplot() +
geom_polygon(data = florida_map, aes(x = long, y = lat, group = group),
fill = "lightblue", color = "black") +
# Add the geocoordinates as points
geom_point(data = df_geo_data_map, aes(x = Long, y = Lat, color = Source),
size = 2, position = position_jitter(width = 0.05, height = 0.05)) +
scale_color_manual(values =
c("M2. Sites" = "red", "E2. Fields" = "green",
"S1. Soil Meta" = "brown", "W1. Weather" = "blue")) +
# Customize the plot appearance
labs(title = "Geocoordinates of Reported Sites for Research, Soils or Weather", x = "Longitude", y = "Latitude") +
theme_bw()
template_sheets <- c("START HERE", "Terminology", "List of sheets and keys", "M1. Experiments", "M2. Sites", "M3. Experimental Design", "E1. Treatments", "E2. Fields", "E3. Plots", "E4. Crop Information", "E5. Planting", "E6. Irrigation", "E7. Fertilizer", "E8. Organic Amendments", "E9. Tillage", "E10. Chemical Applications", "E11. Harvest", "E12. Preplant Soil", "O1. Analysis Methods", "O2. Yield Summary", "O3. Crop Growth",  "O4. Crop Health",  "O5. Soil Surface Properties", "O6. Soil Layer Properties", "O7. Water", "S1. Soil Metadata",   "S2. Soil Layer Properties", "W1. Weather Station Metadata", "W2. Daily Weather Data",
"Z1. Dictionary Metadata", "Z2. Dictionary Observations", "Z3. Dictionary Soils Weather" )
compare_sheet_names <- function(ls_sheets, template_sheets) {
# Convert both lists to character vectors
all_sheets <- unlist(ls_sheets)
template_sheets <- unlist(template_sheets)
# Find mismatches
missing_in_dataset <- setdiff(template_sheets, all_sheets)
missing_in_template <- setdiff(all_sheets, template_sheets)
if (length(missing_in_dataset) == 0 & length(missing_in_template) == 0) {
cat("The sheet names match.\n")
} else {
if (length(missing_in_dataset) > 0) {
cat("The following sheets are in the template workbook but not in the dataset:\n")
print(missing_in_dataset)
}
if (length(missing_in_template) > 0) {
cat("The following sheets are in the dataset but not in the template workbook:\n")
print(missing_in_template)
}
}
}
# Compare the sheets that contain data
compare_sheet_names(ls_sheets, template_sheets)
# Start check of variables contained in data sheets
# Create an empty list to store results
results <- list()
# Initialize variables to store totals
total_non_missing <- 0
total_missing <- 0
# Iterate over sheet names
for (i in data_start_position:(length(ls_sheets) - dictionary_length)) {
sheet_name <- ls_sheets[[i]]
df_name <- make.names(sheet_name)
# Calculate total number of non-NA values for each column
non_na_counts <- colSums(!is.na(get(df_name)))
# Calculate total number of missing values for each column
missing_counts <- colSums(is.na(get(df_name)))
# Calculate total non-missing and missing values for this sheet
total_non_missing_sheet <- sum(non_na_counts)
total_missing_sheet <- sum(missing_counts)
# Update totals
total_non_missing <- total_non_missing + total_non_missing_sheet
total_missing <- total_missing + total_missing_sheet
# Create a data frame to store the results for this sheet
sheet_results <- data.frame(
Sheet_name = sheet_name,
Variable = names(non_na_counts),
Non_NA = non_na_counts,
Missing = missing_counts
)
# Append the sheet results to the list
results[[i]] <- sheet_results
}
# Print totals
cat("Total Non-Missing Values across all sheets:", total_non_missing, "\n")
cat("Total Missing Values across all sheets:", total_missing, "\n")
# Combine all the sheet results data frames into a single data frame
tabulated_values <- do.call(rbind, results)
# Print or return the final result
tabulated_values <- data.frame(tabulated_values, row.names = NULL)
# Shorten values of Variable if .GT. 30
tabulated_values$Variable <- substr(tabulated_values$Variable, 1, 30)
tabulated_values$Variable <- format(tabulated_values$Variable, justify = "left")
tabulated_values$Sheet_name <- format(tabulated_values$Sheet_name, justify = "left")
# Set a higher value for max.print
options(width = 90, max.print = 10000)  # Adjust the value as needed
tabulated_values <- left_align_column_names(tabulated_values)
print(tabulated_values, row.names = FALSE)
# Function to test whether identifiers match in list 'test_vars'
# First need a function to left adjust the list of test variables, test_vars
left_align_columns <- function(df, columns) {
df[columns] <- lapply(df[columns], function(col) {
if (is.character(col)) {
format(col, justify = "left")
} else {
col
}
})
return(df)
}
# Here is the main function
test_ids_equal <- function(df_test1, df_test2, test_vars) {
df1_name <- deparse(substitute(df_test1))
df2_name <- deparse(substitute(df_test2))
# Test whether either df is empty with nrow()
if (nrow(df_test1) == 0 || nrow(df_test2) == 0) {
cat(paste("Insufficient data to test merge of ", df1_name, " and ", df2_name), "\n")
} else {
df1 <- df_test1[, test_vars]
df2 <- df_test2[, test_vars]
df1 <- unique(df1)
df2 <- unique(df2)
df1 <- as.data.frame(df1)
df2 <- as.data.frame(df2)
colnames(df1) <- test_vars
colnames(df2) <- test_vars
df1$From_df1 <- 1
df2$From_df2 <- 1
df_merged <- merge(df1, df2, all = TRUE)
# With merged set of identifiers, we need to check if lengths are equal.
if (nrow(df1) > nrow(df2)) {
message <- paste(df1_name, " is longer than ", df2_name)
} else if (nrow(df1) < nrow(df2)) {
message <- paste(df2_name, " is longer than ", df1_name)
} else {
message <- paste("The sheets ", df1_name, " and ", df2_name, " have the same length")
}
print(message, row.names=FALSE, quote = FALSE)
df_merged <- left_align_columns(df_merged, test_vars) #Left adjust the variables being tested
print(df_merged, row.names=FALSE)
}
}
#' Using TestIdsEqual() to compare identifiers in the sheet E1. Treatments
#' with values used in other sheets such as E2. Fields.
test_ids_equal(M1..Experiments, E1..Treatments, "Experiment ID")
test_ids_equal(E1..Treatments, E2..Fields, "Experiment ID")
test_ids_equal(E1..Treatments, E2..Fields, c("Experiment ID", "Site"))
test_ids_equal(E1..Treatments, E2..Fields, c("Experiment ID", "Site", "Field location"))
test_ids_equal(E1..Treatments, E3..Plots, c("Experiment ID", "Site", "Field location"))
#' Using TestIdsEqual() to compare identifiers in the sheet E2. Treatments
#' with values used in other sheets such as E3. Plots.
test_ids_equal(E2..Fields, E3..Plots, "Field location")
test_ids_equal(E2..Fields, E3..Plots, c("Experiment ID","Field location"))
# Using test_ids_equal() to compare identifiers in other sheets such as for soils
# and weather.
test_ids_equal(E2..Fields, S1..Soil.Metadata, "Soil ID")
test_ids_equal(S1..Soil.Metadata, S2..Soil.Layer.Properties, "Soil ID")
test_ids_equal(E2..Fields, W1..Weather.Station.Metadata, "Weather station ID")
#test_ids_equal(W1..Weather.Station.Metadata, W2_Daily.Weather.Data, "Weather station ID")
df_list <- lapply(ls_sheets, make.names)
df_non_zero <- list()
j <- 1
# Filter the dataframes that meet the conditions
for (i in 8:(length(df_list) - 3)) {
df <- df_list[[i]]
if (nrow(get(df)) > 0) {
df_non_zero[[j]] <- df
j <- j + 1
}
}
#' We loop through df_non_0 to check for matching of Experiment IDs with the
#' corresponding levels in the Treatments data frame.
#' The last seven sheets are excluded because they don't use Experiment.ID.
for (i in 2:(length(df_non_zero) - 7)) {
test_df <- df_non_zero[[i]]
cat(paste("Comparing E1..Treatments to", test_df, "for Experiment ID", "\n"))
test_df <- get(test_df, envir = parent.frame())
test_ids_equal(E1..Treatments, test_df, "Experiment ID")
cat("\n")
}
df_list <- as.list(ls_sheets)
df_variables_used <- data.frame()
#' We iterate through the data frames, skipping first three "readme"-type sheets
#' and last three sheets, which are the dictionaries.
for (i in data_start_position:(length(df_list) - dictionary_length)) {
# Extract the data frame
df <- get(make.names(df_list[[i]]))
# Extract the column names
variable_names <- names(df)
# Check if there are any columns in the dataframe
if (length(variable_names) > 0) {
# Create a data frame with the dataframe name and variable names
temp_result <- data.frame(sheet_name = rep(df_list[[i]], times = 1, each = length(variable_names)),
VariableName = rep(variable_names, times = 1, each = 1),
stringsAsFactors = FALSE)
# Bind the current result to the overall result data frame
df_variables_used <- rbind(df_variables_used, temp_result)
}
}
# Return the final result data frame.
# df_variables_used
# Replace ".." with period-white space (". ") for sheet names
df_variables_used$SheetName <- gsub("  ", ". ", df_variables_used$sheet_name)
# Replace "." with white space (". ") for variable names
df_variables_used$VariableName <- gsub("\\.", " ", df_variables_used$VariableName)
df_variables_used$InVUsed <- 1
#' We create a single dictionary data frame from the three dictionaries in the
#' Excel file.
df_dictionaries <- rbind(Z1..Dictionary.Metadata, Z2..Dictionary.Observations)
df_dictionaries <- rbind(df_dictionaries, Z3..Dictionary.Soils.Weather)
df_dictionaries$InDict <- 1
df_dictionaries$var_defined <- ifelse(!is.na(df_dictionaries$Definition)
& !is.na(df_dictionaries$Definition), 1, 0)
df_dictionaries$has_ICASA_short <- ifelse(!is.na(df_dictionaries$'ICASA short name')
& !is.na(df_dictionaries$'ICASA short name'),
1, 0)
# names(df_dictionaries)
cat(paste("Total variables in the spreadsheet: ", nrow(df_variables_used)))
cat(paste("Total variables in the three dictionaries: ", nrow(df_dictionaries)))
check_dictionary_main <- merge(df_variables_used, df_dictionaries,
by = c("SheetName", "VariableName"), all = TRUE)
check_dictionary_main$InVUsed <- ifelse(check_dictionary_main$InVUsed ==1
& !is.na(check_dictionary_main$InVUsed), 1, 0)
check_dictionary_main$InDict  <- ifelse(check_dictionary_main$InDict  ==1
& !is.na(check_dictionary_main$InDict), 1, 0)
check_dictionary <- check_dictionary_main[, c(1, 2, 4, 11)]
check_dictionary$VariableName <- substr(check_dictionary$VariableName, 1, 35)
check_dictionary <- data.frame(check_dictionary)
mis_match <- subset(check_dictionary, is.na(check_dictionary$InVUsed == 1
& check_dictionary$InDict == 1))
if (nrow(mis_match) > 0)
{mis_match2 <- left_align_column_names(mis_match)
print(mis_match2, row.names = FALSE)
} else {
print("[All variables used are preseent in the Dictionary worksheets.]")
}
cat("\n")
check_dictionary2 <- check_dictionary_main[, c(1, 2, 3, 11)]
check_dictionary2$VariableName <- substr(check_dictionary2$VariableName, 1, 35)
un_defined_vars <- subset(check_dictionary2, check_dictionary2$var_defined == 0
& check_dictionary2$InVUsed == 1)
un_defined_vars <- left_align_column_names(un_defined_vars)
if (nrow(un_defined_vars) > 0)
{un_defined_vars <- left_align_column_names(un_defined_vars)
print(un_defined_vars, row.names = FALSE)
} else {
print("[All variables used have associated definitions.]")
}
cat("\n")
check_dictionary3 <- check_dictionary_main[, c(1, 2, 3, 12)]
check_dictionary3$VariableName <- substr(check_dictionary3$VariableName, 1, 35)
no_ICASA_short <- subset(check_dictionary3, check_dictionary3$has_ICASA_short == 0
& check_dictionary3$InVUsed == 1)
no_ICASA_short$sheet_name <- format(no_ICASA_short$sheet_name, justify = "left")
no_ICASA_short$VariableName <- format(no_ICASA_short$VariableName, justify = "left")
if (nrow(no_ICASA_short) > 0)
{no_ICASA_short <- left_align_column_names(no_ICASA_short)
print(no_ICASA_short, row.names = FALSE)
} else {
print("[All variables used have associated ICASA short name.]")
}
cat("\n")
#' Checking for formulas and merged cells in spreadsheet
for (k in 4:length(ls_sheets)) {        # Loop from first sheet to end of list
# Get sheet for checking
sheet <- ls_sheets[[k]]
# Test for formulas in cells
formulas <- wb$worksheets[[k]]$sheet_data$cc
# print(formulas)
formulas <- formulas[formulas$f != ""
| formulas$f_t != "" | formulas$f_ref != ""
| formulas$f_ca != "" | formulas$f_si != "", c("row_r", "c_r")]
if (nrow(formulas) > 0) {
#  cat("Report for sheet: ", sheet, "\n")
if (nrow(formulas) > 20) {formulas <- formulas[1:20, ]}
cat("> For ", sheet, " formulas found at:\n")
print(formulas, row.names = FALSE)
cat("(Only first 20 instances of cells with formulas are shown.)\n")
} #else {
#cat("> No formulas found.\n")
#}
# cat(typeof(formulas))
# Test for merged cells based on xml properties in sheet
merge_cells <- wb$worksheets[[k]]$mergeCells # Extracts information about merged cells within the "testing" worksheet.
merge_cells <- gsub("<mergeCell ref=\"", "", merge_cells)
merge_cells <- gsub("\"/>", ",", merge_cells)
len_merge_cells <- length(merge_cells)
if (len_merge_cells > 0 & (merge_cells[1] == "A1:F1," | merge_cells[1] == "A1:G1,")) {
merge_cells <- merge_cells[-1] # Negative index removes first element
len_merge_cells <- len_merge_cells - 1
}
if (len_merge_cells > 20) {
merge_cells <- merge_cells[1:20]
}
if (len_merge_cells > 0) {
cat("> For ", sheet, " merged cells found at:\n")
print(merge_cells, row.names = FALSE)
cat(paste("\n","(Only the first 20 cell ranges are displayed.)\n\n"))
} #else {
#   cat("> No merged cells found.\n\n")
# }
}
#' Test for cells with comments based on xml properties in workbook.
#' This is more complicated than one might expect because comments are
#' stored directly with cell values.
#' cat("Processing comments here\n\n")
comment_index <- data.frame()
#' Loop over sheets to create a dataframe that links sheets to the index
#' used to link comments to sheets.
for (k in 4:length(ls_sheets)) {        # Loop from 1 to length of list
# Extract key to relate index in comments to worksheets
len <- length(comment_index)
comment_relation <- wb$worksheets[[k]]$relships$comments
# print(typeof(comment_relation))
comment_relation <- ifelse(length(comment_relation) == 0, 0, comment_relation)
comment_index <- rbind(comment_index, c(k, comment_relation))
}
names(comment_index) <- c("sheet_number", "comment_relation")
#' Loop over list of comments to create a dataframe that links cell addresses
#' to the comment index
comment_cells <- data.frame()
comments <- wb$comments
if (length(comments) > 0) {
for (i in 1:length(comments)) {
for (j in 1:length(comments[[i]])) {
# print(comments[[i]][[j]]$ref)
comment_cells <- rbind(comment_cells, c(i, comments[[i]][[j]]$ref))
}
}
names(comment_cells) <- c("comment_relation", "cell")
comment_cells <- merge(comment_index, comment_cells)
}
#' Report on sheets containing comments.
for (k in 1:length(ls_sheets)) {        # Loop from 1 to length of list
comments_in_sheet <- comment_cells[comment_cells$sheet_number == k, ]
ifelse(nrow(comments_in_sheet) > 20, comments_in_sheet[20, ], comments_in_sheet)
# print(nrow(comments_in_sheet))
if (nrow(comments_in_sheet) > 0) {
cat(paste0("'", ls_sheets[k], "' contains cells with comments.\n"))
cat(paste("The cells with comments are:\n"))
print(comments_in_sheet[, 3])
cat("(Only the first 20 cells are displayed)\n\n")
}
# else {
#   cat(paste0("'", ls_sheets[k], "' had no cells with comments.\n\n"))
# }
}
# Generate header text based on data/variables
header_text <- paste0("# End of analysis for \n\n## ", data_set_name)
cat(header_text, "\n")
